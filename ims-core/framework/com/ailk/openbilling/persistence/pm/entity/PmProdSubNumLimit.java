package com.ailk.openbilling.persistence.pm.entity;

import javax.persistence.Table;
import jef.database.DataObject;
import javax.persistence.Id;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAccessType;
import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.lang.builder.HashCodeBuilder;
import jef.codegen.support.NotModified;
/**
 * This class was generated by EasyFrame according to the table in database.
 * You need to modify the type of primary key field, to the strategy your own.
 * 
 */
@NotModified
@Entity
@Table(schema="pd",name="PM_PROD_SUB_NUM_LIMIT")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(propOrder={"productOfferingId","billingType","maxSubLimit","minSubLimit"})
public class PmProdSubNumLimit extends DataObject{


	/**
	 * A unique identifier for the product offering.
	 */
	@Id
	@Column(name="PRODUCT_OFFERING_ID",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="productOfferingId")
	private Integer productOfferingId;

	@Id
	@Column(name="BILLING_TYPE",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="billingType")
	private Integer billingType;

	/**
	 * Max subscriber limit under the account, only for account-level products, default value 0 means no limit, limit conditions are as follows:

1. When it is account-level subscription, check whether the subscribers who use the account as payment account exceed 3, if they exceed 3, the unlimited product cannot be subscribed by the account.

2. When add new subscribers, if the account has subscribed the unlimited product, check whether the subscribers who use the account as payment account exceed 3, if they exceed 3, it cannot create new subscribers.
	 */
	@Column(name="MAX_SUB_LIMIT",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="maxSubLimit")
	private Integer maxSubLimit;

	@Column(name="MIN_SUB_LIMIT",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="minSubLimit")
	private Integer minSubLimit;

	public void setProductOfferingId(Integer obj){
		this.productOfferingId = obj;
	}

	public Integer getProductOfferingId(){
		return productOfferingId;
	}

	public void setBillingType(Integer obj){
		this.billingType = obj;
	}

	public Integer getBillingType(){
		return billingType;
	}

	public void setMaxSubLimit(Integer obj){
		this.maxSubLimit = obj;
	}

	public Integer getMaxSubLimit(){
		return maxSubLimit;
	}

	public void setMinSubLimit(Integer obj){
		this.minSubLimit = obj;
	}

	public Integer getMinSubLimit(){
		return minSubLimit;
	}

	public PmProdSubNumLimit(){
	}

	public PmProdSubNumLimit(Integer productOfferingId,Integer billingType){
		this.productOfferingId = productOfferingId;
		this.billingType = billingType;
	}

	public boolean equals(final Object rhs0){
		if (rhs0 == null)return false;
		PmProdSubNumLimit rhs=(PmProdSubNumLimit)rhs0;
		if(!ObjectUtils.equals(billingType, rhs.billingType)) return false;
		if(!ObjectUtils.equals(productOfferingId, rhs.productOfferingId)) return false;
		return super.isEquals(rhs);
	}

	public int hashCode(){
		return new HashCodeBuilder()
		.append(billingType)
		.append(productOfferingId)
		.append(super.getHashCode())
		.toHashCode();
	}


public enum Field implements jef.database.Field{productOfferingId,billingType,maxSubLimit,minSubLimit}
}