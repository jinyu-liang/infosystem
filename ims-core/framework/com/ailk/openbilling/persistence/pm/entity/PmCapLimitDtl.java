package com.ailk.openbilling.persistence.pm.entity;

import javax.persistence.Table;
import jef.database.DataObject;
import javax.persistence.Id;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAccessType;
import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.lang.builder.HashCodeBuilder;
import jef.codegen.support.NotModified;
/**
 * This class was generated by EasyFrame according to the table in database.
 * You need to modify the type of primary key field, to the strategy your own.
 */
@NotModified
@Entity
@Table(schema="PD",name="PM_CAP_LIMIT_DTL")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(propOrder={"priceRuleId","capLimitId","value","measureId","notificationId","cycleUnit","cycleType"})
public class PmCapLimitDtl extends DataObject{


	/**
	 * rating rule ID
	 */
	@Id
	@Column(name="PRICE_RULE_ID",precision=10,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="priceRuleId")
	private Integer priceRuleId;

	/**
	 * Checking rule ID
	 */
	@Column(name="CAP_LIMIT_ID",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="capLimitId")
	private Integer capLimitId;

	/**
	 * Rule expression
	 */
	@Column(name="VALUE",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="value")
	private Long value;

	/**
	 * Charge measurement unit
	 */
	@Column(name="MEASURE_ID",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="measureId")
	private Integer measureId;

	/**
	 * Business notification
	 */
	@Column(name="NOTIFICATION_ID",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="notificationId")
	private Integer notificationId;

	/**
	 * Specific cycle ,for example one cycle is 3 days ,so that the value of this column  is 3 -1 means no cycle limit
	 */
	@Column(name="CYCLE_UNIT",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="cycleUnit")
	private Integer cycleUnit;

	/**
	 * Type of cycle  1:using calendar day as cycle type  2:using calendar week as cycle type  3:using calendar month as cycle type  4:using calendar year as cycle type  5:using dynamic month as cycle typeï¼Œsuch as ORACLE provides the  function of  add_months() 6:using the offset of  hours as cycle type  7:using the offset of (calendar) month as cycle type
	 */
	@Column(name="CYCLE_TYPE",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="cycleType")
	private Integer cycleType;

	public void setPriceRuleId(Integer obj){
		this.priceRuleId = obj;
	}

	public Integer getPriceRuleId(){
		return priceRuleId;
	}

	public void setCapLimitId(Integer obj){
		this.capLimitId = obj;
	}

	public Integer getCapLimitId(){
		return capLimitId;
	}

	public void setValue(Long obj){
		this.value = obj;
	}

	public Long getValue(){
		return value;
	}

	public void setMeasureId(Integer obj){
		this.measureId = obj;
	}

	public Integer getMeasureId(){
		return measureId;
	}

	public void setNotificationId(Integer obj){
		this.notificationId = obj;
	}

	public Integer getNotificationId(){
		return notificationId;
	}

	public void setCycleUnit(Integer obj){
		this.cycleUnit = obj;
	}

	public Integer getCycleUnit(){
		return cycleUnit;
	}

	public void setCycleType(Integer obj){
		this.cycleType = obj;
	}

	public Integer getCycleType(){
		return cycleType;
	}

	public PmCapLimitDtl(){
	}

	public PmCapLimitDtl(Integer priceRuleId){
		this.priceRuleId = priceRuleId;
	}

	public boolean equals(final Object rhs0){
		if (rhs0 == null)return false;
		PmCapLimitDtl rhs=(PmCapLimitDtl)rhs0;
		if(!ObjectUtils.equals(priceRuleId, rhs.priceRuleId)) return false;
		return super.isEquals(rhs);
	}

	public int hashCode(){
		return new HashCodeBuilder()
		.append(priceRuleId)
		.append(super.getHashCode())
		.toHashCode();
	}


public enum Field implements jef.database.Field{priceRuleId,capLimitId,value,measureId,notificationId,cycleUnit,cycleType}
}