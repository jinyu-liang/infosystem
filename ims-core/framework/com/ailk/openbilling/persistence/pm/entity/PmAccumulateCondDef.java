package com.ailk.openbilling.persistence.pm.entity;

import javax.persistence.Table;
import jef.database.DataObject;
import javax.persistence.Id;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAccessType;
import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.lang.builder.HashCodeBuilder;
import jef.codegen.support.NotModified;
/**
 * This class was generated by EasyFrame according to the table in database.
 * You need to modify the type of primary key field, to the strategy your own.
 * 
 */
@NotModified
@Entity
@Table(schema="pd",name="PM_ACCUMULATE_COND_DEF")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(propOrder={"accumulateCondId","name","capLimitFlag"})
public class PmAccumulateCondDef extends DataObject{


	/**
	 * Identifier of the rule  ,that the rules was referenced by  accumulating.
	 */
	@Id
	@Column(name="ACCUMULATE_COND_ID",precision=10,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="accumulateCondId")
	private Integer accumulateCondId;

	/**
	 * Name of the accumulate condition
	 */
	@Column(name="NAME",columnDefinition="Varchar",length=256)
	@XmlElement(name="name")
	private String name;

	@Column(name="CAP_LIMIT_FLAG",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="capLimitFlag")
	private Integer capLimitFlag;

	public void setAccumulateCondId(Integer obj){
		this.accumulateCondId = obj;
	}

	public Integer getAccumulateCondId(){
		return accumulateCondId;
	}

	public void setName(String obj){
		this.name = obj;
	}

	public String getName(){
		return name;
	}

	public void setCapLimitFlag(Integer obj){
		this.capLimitFlag = obj;
	}

	public Integer getCapLimitFlag(){
		return capLimitFlag;
	}

	public PmAccumulateCondDef(){
	}

	public PmAccumulateCondDef(Integer accumulateCondId){
		this.accumulateCondId = accumulateCondId;
	}

	public boolean equals(final Object rhs0){
		if (rhs0 == null)return false;
		PmAccumulateCondDef rhs=(PmAccumulateCondDef)rhs0;
		if(!ObjectUtils.equals(accumulateCondId, rhs.accumulateCondId)) return false;
		return super.isEquals(rhs);
	}

	public int hashCode(){
		return new HashCodeBuilder()
		.append(accumulateCondId)
		.append(super.getHashCode())
		.toHashCode();
	}


public enum Field implements jef.database.Field{accumulateCondId,name,capLimitFlag}
}