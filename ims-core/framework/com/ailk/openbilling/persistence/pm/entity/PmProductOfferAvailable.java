package com.ailk.openbilling.persistence.pm.entity;

import javax.persistence.Table;
import jef.database.DataObject;
import javax.persistence.Id;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAccessType;
import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.Date;
import jef.codegen.support.NotModified;
/**
 * This class was generated by EasyFrame according to the table in database.
 * You need to modify the type of primary key field, to the strategy your own.
 * 
 */
@NotModified
@Entity
@Table(schema="PD",name="PM_PRODUCT_OFFER_AVAILABLE")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(propOrder={"productOfferingId","regionCode","customerSegment","orderChannel","validDate","expireDate"})
public class PmProductOfferAvailable extends DataObject{


	/**
	 * A unique identifier for the product offering.
	 */
	@Id
	@Column(name="PRODUCT_OFFERING_ID",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="productOfferingId")
	private Integer productOfferingId;

	/**
	 * region code（2-level region code）
	 */
	@Id
	@Column(name="REGION_CODE",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="regionCode")
	private Integer regionCode;

	/**
	 * "Compare to other customers's rank
（similar to Telecom's VipFlag）
such as: gold card user, sliver card user.etc

0：common user
1：diamond user
2： gold card user
3：sliver card user.
4：VIP card user
5：common card user
	 */
	@Id
	@Column(name="CUSTOMER_SEGMENT",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="customerSegment")
	private Integer customerSegment;

	/**
	 * transact channel
	 */
	@Id
	@Column(name="ORDER_CHANNEL",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="orderChannel")
	private Integer orderChannel;

	/**
	 * effective date
	 */
	@Column(name="VALID_DATE",columnDefinition="TimeStamp")
	@XmlElement(name="validDate")
	private Date validDate;

	/**
	 * expiring date
	 */
	@Column(name="EXPIRE_DATE",columnDefinition="TimeStamp")
	@XmlElement(name="expireDate")
	private Date expireDate;

	public void setProductOfferingId(Integer obj){
		this.productOfferingId = obj;
	}

	public Integer getProductOfferingId(){
		return productOfferingId;
	}

	public void setRegionCode(Integer obj){
		this.regionCode = obj;
	}

	public Integer getRegionCode(){
		return regionCode;
	}

	public void setCustomerSegment(Integer obj){
		this.customerSegment = obj;
	}

	public Integer getCustomerSegment(){
		return customerSegment;
	}

	public void setOrderChannel(Integer obj){
		this.orderChannel = obj;
	}

	public Integer getOrderChannel(){
		return orderChannel;
	}

	public void setValidDate(Date obj){
		this.validDate = obj;
	}

	public Date getValidDate(){
		return validDate;
	}

	public void setExpireDate(Date obj){
		this.expireDate = obj;
	}

	public Date getExpireDate(){
		return expireDate;
	}

	public PmProductOfferAvailable(){
	}

	public PmProductOfferAvailable(Integer productOfferingId,Integer regionCode,Integer customerSegment,Integer orderChannel){
		this.productOfferingId = productOfferingId;
		this.regionCode = regionCode;
		this.customerSegment = customerSegment;
		this.orderChannel = orderChannel;
	}

	public boolean equals(final Object rhs0){
		if (rhs0 == null)return false;
		PmProductOfferAvailable rhs=(PmProductOfferAvailable)rhs0;
		if(!ObjectUtils.equals(regionCode, rhs.regionCode)) return false;
		if(!ObjectUtils.equals(customerSegment, rhs.customerSegment)) return false;
		if(!ObjectUtils.equals(orderChannel, rhs.orderChannel)) return false;
		if(!ObjectUtils.equals(productOfferingId, rhs.productOfferingId)) return false;
		return super.isEquals(rhs);
	}

	public int hashCode(){
		return new HashCodeBuilder()
		.append(regionCode)
		.append(customerSegment)
		.append(orderChannel)
		.append(productOfferingId)
		.append(super.getHashCode())
		.toHashCode();
	}


public enum Field implements jef.database.Field{productOfferingId,regionCode,customerSegment,orderChannel,validDate,expireDate}
}