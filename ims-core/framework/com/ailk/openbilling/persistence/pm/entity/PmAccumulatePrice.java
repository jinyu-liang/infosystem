package com.ailk.openbilling.persistence.pm.entity;

import javax.persistence.Table;
import jef.database.DataObject;
import javax.persistence.Id;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAccessType;
import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.lang.builder.HashCodeBuilder;
import jef.codegen.support.NotModified;
/**
 * This class was generated by EasyFrame according to the table in database.
 * You need to modify the type of primary key field, to the strategy your own.
 * 
 */
@NotModified
@Entity
@Table(schema="pd",name="PM_ACCUMULATE_PRICE")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(propOrder={"priceId","dependProdFlag","cycleUnit","cycleType","accumulatePriceType"})
public class PmAccumulatePrice extends DataObject{


	/**
	 * Identifier of accumulated reward pricing ,which associate with PM_COMPONENT_PRODOFFER_PRICE.PRICE_ID
	 */
	@Id
	@Column(name="PRICE_ID",precision=10,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="priceId")
	private Integer priceId;

	/**
	 * 0:Non-dependent
1:Dependent
	 */
	@Column(name="DEPEND_PROD_FLAG",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="dependProdFlag")
	private Integer dependProdFlag;

	/**
	 * Value of cycle ,set 3 when the cycle is 3 days
	 */
	@Column(name="CYCLE_UNIT",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="cycleUnit")
	private Integer cycleUnit;

	/**
	 * Type of cycle

1:using calendar day as cycle type
2:using calendar week as cycle type
3:using calendar month as cycle type
4:using calendar year as cycle type
5:using dynamic month as cycle typeฃฌsuch as ORACLE provides the  function of  add_months()
6:using the offset of  hours as cycle type
7:using the offset of (calendar) month as cycle type
	 */
	@Column(name="CYCLE_TYPE",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="cycleType")
	private Integer cycleType;

	/**
	 * 10:statistics accumulation
40ฃบวะปฐตฅภผฦำลป---ถเถฮภปฑไืสทั(ิผถจฃบ1กขถเถฮว้ฟ๖ฃฌึปฤฒฮฟผาปธ๖ภปฟฦฤฟฃป2กขฤฟวฐึปฤฒฮฟผืสิดะอภปมฟ)
41ฃบฒปวะปฐตฅภผฦำลป ---ตฅถฮภปฑไืสทั
50:amount discount before threshold is reached
51:amount discount after threshold is reached
60:charge supplement before threshold is reached
61:charge supplement after threshold is reached
70:ceiling before before threshold is reached
71:ceiling after threshold is reached
80:flooring before threshold is reached
81:flooring after threshold is reached
90ฃบผ๒ตฅีฟำลป, ฑํสพถิ PM_ACCUMULATE_DISCOUNT.thresholdึฎบ๓ำลป
91ฃบถเถฮีฟำลป, ฑํสพถิ PM_ACCUMULATE_DISCOUNT.thresholdึฎวฐำลปฃฌฟษถเถฮ(ิผถจฃบ1กขถเถฮว้ฟ๖ฃฌึปฤฒฮฟผาปธ๖ภปฟฦฤฟฃป2กขฤฟวฐึปฤฒฮฟผทัำระอภปมฟ)
100:odd amount in tariff
	 */
	@Column(name="ACCUMULATE_PRICE_TYPE",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="accumulatePriceType")
	private Integer accumulatePriceType;

	public void setPriceId(Integer obj){
		this.priceId = obj;
	}

	public Integer getPriceId(){
		return priceId;
	}

	public void setDependProdFlag(Integer obj){
		this.dependProdFlag = obj;
	}

	public Integer getDependProdFlag(){
		return dependProdFlag;
	}

	public void setCycleUnit(Integer obj){
		this.cycleUnit = obj;
	}

	public Integer getCycleUnit(){
		return cycleUnit;
	}

	public void setCycleType(Integer obj){
		this.cycleType = obj;
	}

	public Integer getCycleType(){
		return cycleType;
	}

	public void setAccumulatePriceType(Integer obj){
		this.accumulatePriceType = obj;
	}

	public Integer getAccumulatePriceType(){
		return accumulatePriceType;
	}

	public PmAccumulatePrice(){
	}

	public PmAccumulatePrice(Integer priceId){
		this.priceId = priceId;
	}

	public boolean equals(final Object rhs0){
		if (rhs0 == null)return false;
		PmAccumulatePrice rhs=(PmAccumulatePrice)rhs0;
		if(!ObjectUtils.equals(priceId, rhs.priceId)) return false;
		return super.isEquals(rhs);
	}

	public int hashCode(){
		return new HashCodeBuilder()
		.append(priceId)
		.append(super.getHashCode())
		.toHashCode();
	}


public enum Field implements jef.database.Field{priceId,dependProdFlag,cycleUnit,cycleType,accumulatePriceType}
}