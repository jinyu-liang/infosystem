package com.ailk.openbilling.persistence.pm.entity;

import javax.persistence.Table;
import jef.database.DataObject;
import javax.persistence.Id;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAccessType;
import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.lang.builder.HashCodeBuilder;
import jef.codegen.support.NotModified;
/**
 * This class was generated by EasyFrame according to the table in database.
 * You need to modify the type of primary key field, to the strategy your own.
 * 
 */
@NotModified
@Entity
@Table(schema="pd",name="PM_COMPLEX_ACCUM_PIRCE_DTL")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(propOrder={"priceDtlId","priceId","threshold","alarmId","alarmThreshold","discNumerator","discDenominator","capLimitFlag"})
public class PmComplexAccumPirceDtl extends DataObject{


	@Id
	@Column(name="PRICE_DTL_ID",precision=10,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="priceDtlId")
	private Integer priceDtlId;

	/**
	 * Identifier of accumulated reward pricing ,which associate with PM_COMPONENT_PRODOFFER_PRICE.PRICE_ID
	 */
	@Column(name="PRICE_ID",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="priceId")
	private Integer priceId;

	/**
	 * Threshold of accumulating references charge-item
	 */
	@Column(name="THRESHOLD",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="threshold")
	private Long threshold;

	/**
	 * Alarm Identifier
Associate with alarm rules of alarm template?alarm channel
	 */
	@Column(name="ALARM_ID",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="alarmId")
	private Integer alarmId;

	/**
	 * Alarm threshold of accumulating references,
when the accumulated referenced item has arrive at threshold, it will trigger PM_ACCUMULATE_PRICE.alarm
	 */
	@Column(name="ALARM_THRESHOLD",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="alarmThreshold")
	private Long alarmThreshold;

	/**
	 * Discount numerator
	 */
	@Column(name="DISC_NUMERATOR",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="discNumerator")
	private Integer discNumerator;

	/**
	 * Discount denominator,which can not be 0
	 */
	@Column(name="DISC_DENOMINATOR",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="discDenominator")
	private Integer discDenominator;

	/**
	 * 0:????cap Limit,1:???Cap Limit, ??1?,??????????????????
	 */
	@Column(name="CAP_LIMIT_FLAG",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="capLimitFlag")
	private Integer capLimitFlag;

	public void setPriceDtlId(Integer obj){
		this.priceDtlId = obj;
	}

	public Integer getPriceDtlId(){
		return priceDtlId;
	}

	public void setPriceId(Integer obj){
		this.priceId = obj;
	}

	public Integer getPriceId(){
		return priceId;
	}

	public void setThreshold(Long obj){
		this.threshold = obj;
	}

	public Long getThreshold(){
		return threshold;
	}

	public void setAlarmId(Integer obj){
		this.alarmId = obj;
	}

	public Integer getAlarmId(){
		return alarmId;
	}

	public void setAlarmThreshold(Long obj){
		this.alarmThreshold = obj;
	}

	public Long getAlarmThreshold(){
		return alarmThreshold;
	}

	public void setDiscNumerator(Integer obj){
		this.discNumerator = obj;
	}

	public Integer getDiscNumerator(){
		return discNumerator;
	}

	public void setDiscDenominator(Integer obj){
		this.discDenominator = obj;
	}

	public Integer getDiscDenominator(){
		return discDenominator;
	}

	public void setCapLimitFlag(Integer obj){
		this.capLimitFlag = obj;
	}

	public Integer getCapLimitFlag(){
		return capLimitFlag;
	}

	public PmComplexAccumPirceDtl(){
	}

	public PmComplexAccumPirceDtl(Integer priceDtlId){
		this.priceDtlId = priceDtlId;
	}

	public boolean equals(final Object rhs0){
		if (rhs0 == null)return false;
		PmComplexAccumPirceDtl rhs=(PmComplexAccumPirceDtl)rhs0;
		if(!ObjectUtils.equals(priceDtlId, rhs.priceDtlId)) return false;
		return super.isEquals(rhs);
	}

	public int hashCode(){
		return new HashCodeBuilder()
		.append(priceDtlId)
		.append(super.getHashCode())
		.toHashCode();
	}


public enum Field implements jef.database.Field{priceDtlId,priceId,threshold,alarmId,alarmThreshold,discNumerator,discDenominator,capLimitFlag}
}