package com.ailk.openbilling.persistence.pm.entity;

import javax.persistence.Table;
import jef.database.DataObject;
import javax.persistence.Id;
import javax.persistence.GenerationType;
import javax.persistence.GeneratedValue;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAccessType;
import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.Date;
import jef.codegen.support.NotModified;
/**
 * This class was generated by EasyFrame according to the table in database.
 * You need to modify the type of primary key field, to the strategy your own.
 * 
 */
@NotModified
@Entity
@Table(schema="PD",name="PM_PRODUCT_SPEC")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(propOrder={"prodSpecId","typeId","name","description","lifecycleStatus","validDate","expireDate"})
public class PmProductSpec extends DataObject{


	/**
	 * An identification number assigned to uniquely identify the specification.
	 */
	@GeneratedValue(strategy=GenerationType.SEQUENCE)
	@Id
	@Column(name="PROD_SPEC_ID",precision=10,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="prodSpecId")
	private Integer prodSpecId;

	/**
	 * product specification type ID
value：
0：(Atomic Product Specification)
1：(Composite Product Specification)
	 */
	@Column(name="TYPE_ID",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="typeId")
	private Integer typeId;

	/**
	 * The name of the product specification.
	 */
	@Column(name="NAME",columnDefinition="Varchar",length=256)
	@XmlElement(name="name")
	private String name;

	/**
	 * Description information to explain what is product specification.
	 */
	@Column(name="DESCRIPTION",columnDefinition="Varchar",length=1024)
	@XmlElement(name="description")
	private String description;

	/**
	 * status of life cycle ID
The condition of the product specification, such as active, inactive, planned.
from PM_ENUM_LIFECYCLE_STATUS, apply_at in (0,1)
	 */
	@Column(name="LIFECYCLE_STATUS",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="lifecycleStatus")
	private Integer lifecycleStatus;

	/**
	 * effective date
	 */
	@Column(name="VALID_DATE",columnDefinition="TimeStamp")
	@XmlElement(name="validDate")
	private Date validDate;

	/**
	 * expiring date
	 */
	@Column(name="EXPIRE_DATE",columnDefinition="TimeStamp")
	@XmlElement(name="expireDate")
	private Date expireDate;

	public void setProdSpecId(Integer obj){
		this.prodSpecId = obj;
	}

	public Integer getProdSpecId(){
		return prodSpecId;
	}

	public void setTypeId(Integer obj){
		this.typeId = obj;
	}

	public Integer getTypeId(){
		return typeId;
	}

	public void setName(String obj){
		this.name = obj;
	}

	public String getName(){
		return name;
	}

	public void setDescription(String obj){
		this.description = obj;
	}

	public String getDescription(){
		return description;
	}

	public void setLifecycleStatus(Integer obj){
		this.lifecycleStatus = obj;
	}

	public Integer getLifecycleStatus(){
		return lifecycleStatus;
	}

	public void setValidDate(Date obj){
		this.validDate = obj;
	}

	public Date getValidDate(){
		return validDate;
	}

	public void setExpireDate(Date obj){
		this.expireDate = obj;
	}

	public Date getExpireDate(){
		return expireDate;
	}

	public PmProductSpec(){
	}

	public PmProductSpec(Integer prodSpecId){
		this.prodSpecId = prodSpecId;
	}

	public boolean equals(final Object rhs0){
		if (rhs0 == null)return false;
		PmProductSpec rhs=(PmProductSpec)rhs0;
		if(!ObjectUtils.equals(prodSpecId, rhs.prodSpecId)) return false;
		return super.isEquals(rhs);
	}

	public int hashCode(){
		return new HashCodeBuilder()
		.append(prodSpecId)
		.append(super.getHashCode())
		.toHashCode();
	}


public enum Field implements jef.database.Field{prodSpecId,typeId,name,description,lifecycleStatus,validDate,expireDate}
}