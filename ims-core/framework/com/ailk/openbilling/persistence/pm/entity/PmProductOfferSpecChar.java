package com.ailk.openbilling.persistence.pm.entity;

import javax.persistence.Table;
import jef.database.DataObject;
import javax.persistence.Id;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAccessType;
import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.lang.builder.HashCodeBuilder;
import jef.codegen.support.NotModified;
/**
 * This class was generated by EasyFrame according to the table in database.
 * You need to modify the type of primary key field, to the strategy your own.
 */
@NotModified
@Entity
@Table(schema="PD",name="PM_PRODUCT_OFFER_SPEC_CHAR")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(propOrder={"productOfferingId","specCharId","valueType","value","valueMax","description"})
public class PmProductOfferSpecChar extends DataObject{


	/**
	 * A unique identifier for the product offering.
	 */
	@Id
	@Column(name="PRODUCT_OFFERING_ID",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="productOfferingId")
	private Integer productOfferingId;

	/**
	 * 销售品特征标识，一般，这些特征标识从产品规格过来。  10201: 亲情号码，在此设置，表示亲情号码设置的个数限制 11401: 黑白号码，在此设置，表示黑白名单号码设置的个数限制 11201: 指定的小区, 在此设置，Home Zone产品允许用户选择的最大 HomeZone 个数限制；---PM_PRODUCT_OFFER_ATTRIBUTE.ZONE_LIMIT 字段迁移到这个属性上。   以下两个特殊，从NG版本中迁移过来： 11，表示帐务群组产品适用对象属性（注意，新增的枚举值11）。其中，      VALUE含义如下：           0，默认，表示群组产品作用于群的整体。           1，表示群组产品作用于群下每个成员。           2，表示作用于群主号码的产品。  12，表示计费群组产品适用对象属性（注意，新增的枚举值12）。其中，      VALUE含义如下：           0，默认，表示群组产品作用于群的整体。就是说，（周期性）免费资源对整个群成员共享消耗；虚用户下累积量累计。           1，表示群组产品作用于群下每个成员。就是说，（周期性）免费资源分摊在各成员上消耗；实体用户下累积量累计。
	 */
	@Id
	@Column(name="SPEC_CHAR_ID",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="specCharId")
	private Integer specCharId;

	/**
	 * 销售品上特征信息的值类型 1：单值，只需要从VALUE中获取 2：范围，最大最小分别填在VALUE_MAX/VALUE中
	 */
	@Column(name="VALUE_TYPE",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="valueType")
	private Integer valueType;

	/**
	 * 特征属性起始值
	 */
	@Column(name="VALUE",columnDefinition="Varchar",length=256,nullable=false)
	@XmlElement(name="value")
	private String value;

	/**
	 * 特征属性结束值
	 */
	@Column(name="VALUE_MAX",columnDefinition="Varchar",length=256)
	@XmlElement(name="valueMax")
	private String valueMax;

	/**
	 * 销售品特征描述
	 */
	@Column(name="DESCRIPTION",columnDefinition="Varchar",length=1024)
	@XmlElement(name="description")
	private String description;

	public void setProductOfferingId(Integer obj){
		this.productOfferingId = obj;
	}

	public Integer getProductOfferingId(){
		return productOfferingId;
	}

	public void setSpecCharId(Integer obj){
		this.specCharId = obj;
	}

	public Integer getSpecCharId(){
		return specCharId;
	}

	public void setValueType(Integer obj){
		this.valueType = obj;
	}

	public Integer getValueType(){
		return valueType;
	}

	public void setValue(String obj){
		this.value = obj;
	}

	public String getValue(){
		return value;
	}

	public void setValueMax(String obj){
		this.valueMax = obj;
	}

	public String getValueMax(){
		return valueMax;
	}

	public void setDescription(String obj){
		this.description = obj;
	}

	public String getDescription(){
		return description;
	}

	public PmProductOfferSpecChar(){
	}

	public PmProductOfferSpecChar(Integer productOfferingId,Integer specCharId){
		this.productOfferingId = productOfferingId;
		this.specCharId = specCharId;
	}

	public boolean equals(final Object rhs0){
		if (rhs0 == null)return false;
		PmProductOfferSpecChar rhs=(PmProductOfferSpecChar)rhs0;
		if(!ObjectUtils.equals(specCharId, rhs.specCharId)) return false;
		if(!ObjectUtils.equals(productOfferingId, rhs.productOfferingId)) return false;
		return super.isEquals(rhs);
	}

	public int hashCode(){
		return new HashCodeBuilder()
		.append(specCharId)
		.append(productOfferingId)
		.append(super.getHashCode())
		.toHashCode();
	}


public enum Field implements jef.database.Field{productOfferingId,specCharId,valueType,value,valueMax,description}
}