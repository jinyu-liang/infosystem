package com.ailk.openbilling.persistence.pm.entity;

import javax.persistence.Table;
import jef.database.DataObject;
import javax.persistence.Id;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAccessType;
import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.lang.builder.HashCodeBuilder;
import jef.codegen.support.NotModified;
/**
 * This class was generated by EasyFrame according to the table in database.
 * You need to modify the type of primary key field, to the strategy your own.
 */
@NotModified
@Entity
@Table(schema="pd",name="PM_PRODUCT_OFFER_NOTIFY")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(propOrder={"productOfferingId","notifyType","notifyMode","offsetCycleType","offsetCycleUnit","cycleCount","cycleUnit","cycleType","notificationId","channelId"})
public class PmProductOfferNotify extends DataObject{


	/**
	 * A unique identifier for the product offering.
	 */
	@Id
	@Column(name="PRODUCT_OFFERING_ID",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="productOfferingId")
	private Integer productOfferingId;

	/**
	 * 1ฃบฯ๚สฦทษ๚ะงฬแะั 2ฃบฯ๚สฦทสงะงฬแะั 3:ฯ๚สฦทึฦฺะิฬแะั 4ฃบฯ๚สฦทนฬทัฟทัณษนฆฬแะั 5ฃบฯ๚สฦทนฬทัฟทัสงฐฬแะั 6:ฯ๚สฦทนฬทัฟทัฬแะั
	 */
	@Id
	@Column(name="NOTIFY_TYPE",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="notifyType")
	private Integer notifyType;

	/**
	 * Notification mode  1-Immediately 2-Before 3-After
	 */
	@Column(name="NOTIFY_MODE",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="notifyMode")
	private Integer notifyMode;

	/**
	 * ฬแะัษ๚ะงฦซาฦสฑผไ Type of cycle referenced  1:using calendar day as cycle type 2:using calendar week as cycle type 3:using calendar month as cycle type 4:using calendar year as cycle type 5:using dynamic month as cycle typeฃฌsuch as ORACLE provides the  function of  add_months() 6:using the offset of  hours as cycle type 7:using the offset of (calendar) month as cycle type
	 */
	@Column(name="OFFSET_CYCLE_TYPE",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="offsetCycleType")
	private Integer offsetCycleType;

	/**
	 * ฬแะัษ๚ะงฦซาฦสฑผไ Cycle unit, filled with specific days and weeks before or after activation or expiration occurs for notification, invalid for immediate notification   Value of cycle ,set 3 if the cycle is 3 days
	 */
	@Column(name="OFFSET_CYCLE_UNIT",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="offsetCycleUnit")
	private Integer offsetCycleUnit;

	/**
	 * Alarm Cycle Numbers ,-1ฑํสพรปำะึฦฺสฯึฦ
	 */
	@Column(name="CYCLE_COUNT",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="cycleCount")
	private Long cycleCount;

	/**
	 * Cycle  Unit
	 */
	@Column(name="CYCLE_UNIT",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="cycleUnit")
	private Integer cycleUnit;

	/**
	 * Cycle Type 1:cycle type :by calendar day 2: cycle type :by calendar week 3: cycle type :by calendar month 4: cycle type :by calendar year 5:cycle type :by month, similar to add_months ()function provided by ORACLE. 6. cycle type: according to hour offset. 7. cycle type: according to month offset. Up till now, the accumulator shall be stored based on the amount of days. For the accumulative cycle, the minimum unit should be day.
	 */
	@Column(name="CYCLE_TYPE",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="cycleType")
	private Integer cycleType;

	/**
	 * Notification ID,from SYS_NOTIFICATION_RULE.Notification
	 */
	@Column(name="NOTIFICATION_ID",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="notificationId")
	private Integer notificationId;

	@Id
	@Column(name="CHANNEL_ID",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="channelId")
	private Integer channelId;

	public void setProductOfferingId(Integer obj){
		this.productOfferingId = obj;
	}

	public Integer getProductOfferingId(){
		return productOfferingId;
	}

	public void setNotifyType(Integer obj){
		this.notifyType = obj;
	}

	public Integer getNotifyType(){
		return notifyType;
	}

	public void setNotifyMode(Integer obj){
		this.notifyMode = obj;
	}

	public Integer getNotifyMode(){
		return notifyMode;
	}

	public void setOffsetCycleType(Integer obj){
		this.offsetCycleType = obj;
	}

	public Integer getOffsetCycleType(){
		return offsetCycleType;
	}

	public void setOffsetCycleUnit(Integer obj){
		this.offsetCycleUnit = obj;
	}

	public Integer getOffsetCycleUnit(){
		return offsetCycleUnit;
	}

	public void setCycleCount(Long obj){
		this.cycleCount = obj;
	}

	public Long getCycleCount(){
		return cycleCount;
	}

	public void setCycleUnit(Integer obj){
		this.cycleUnit = obj;
	}

	public Integer getCycleUnit(){
		return cycleUnit;
	}

	public void setCycleType(Integer obj){
		this.cycleType = obj;
	}

	public Integer getCycleType(){
		return cycleType;
	}

	public void setNotificationId(Integer obj){
		this.notificationId = obj;
	}

	public Integer getNotificationId(){
		return notificationId;
	}

	public void setChannelId(Integer obj){
		this.channelId = obj;
	}

	public Integer getChannelId(){
		return channelId;
	}

	public PmProductOfferNotify(){
	}

	public PmProductOfferNotify(Integer productOfferingId,Integer notifyType,Integer channelId){
		this.productOfferingId = productOfferingId;
		this.notifyType = notifyType;
		this.channelId = channelId;
	}

	public boolean equals(final Object rhs0){
		if (rhs0 == null)return false;
		PmProductOfferNotify rhs=(PmProductOfferNotify)rhs0;
		if(!ObjectUtils.equals(channelId, rhs.channelId)) return false;
		if(!ObjectUtils.equals(notifyType, rhs.notifyType)) return false;
		if(!ObjectUtils.equals(productOfferingId, rhs.productOfferingId)) return false;
		return super.isEquals(rhs);
	}

	public int hashCode(){
		return new HashCodeBuilder()
		.append(channelId)
		.append(notifyType)
		.append(productOfferingId)
		.append(super.getHashCode())
		.toHashCode();
	}


public enum Field implements jef.database.Field{productOfferingId,notifyType,notifyMode,offsetCycleType,offsetCycleUnit,cycleCount,cycleUnit,cycleType,notificationId,channelId}
}