package com.ailk.openbilling.persistence.pm.entity;

import javax.persistence.Table;
import jef.database.DataObject;
import javax.persistence.Id;
import javax.persistence.GenerationType;
import javax.persistence.GeneratedValue;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAccessType;
import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.Date;
import jef.codegen.support.NotModified;
/**
 * This class was generated by EasyFrame according to the table in database.
 * You need to modify the type of primary key field, to the strategy your own.
 * 
 */
@NotModified
@Entity
@Table(schema="pd",name="PM_PRODUCT_SPEC_CHAR")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(propOrder={"specCharId","name","description","isUnique","valueTypeId","minCardinality","maxCardinality","isExtensible","derivationFormula","isConfigurable","validDate","expireDate"})
public class PmProductSpecChar extends DataObject{


	/**
	 * A unique identifier for the product specification characteristic.
	 */
	@GeneratedValue(strategy=GenerationType.SEQUENCE)
	@Id
	@Column(name="SPEC_CHAR_ID",precision=10,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="specCharId")
	private Integer specCharId;

	/**
	 * A word, term, or phrase by which the characteristic is known and distinguished from characteristics.
specification character name
	 */
	@Column(name="NAME",columnDefinition="Varchar",length=256)
	@XmlElement(name="name")
	private String name;

	/**
	 * A narrative that explains the characteristic.
	 */
	@Column(name="DESCRIPTION",columnDefinition="Varchar",length=1024)
	@XmlElement(name="description")
	private String description;

	/**
	 * An indicator that specifies if a value is unique for the specification.

Possible values are; "unique while value is in effect" and "unique whether value is in effect or not"
enum value：
0：no
1：yes
	 */
	@Column(name="IS_UNIQUE",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="isUnique")
	private Integer isUnique;

	/**
	 * A kind of value that the characteristic can take on, such as numeric, text, and so forth.
enum：
0：number
1：field

from PM_ENUM_VALUE_TYPE_DEF
	 */
	@Column(name="VALUE_TYPE_ID",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="valueTypeId")
	private Integer valueTypeId;

	/**
	 * The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality.
	 */
	@Column(name="MIN_CARDINALITY",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="minCardinality")
	private Long minCardinality;

	/**
	 * The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality.
	 */
	@Column(name="MAX_CARDINALITY",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="maxCardinality")
	private Long maxCardinality;

	/**
	 * An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for an Entity.

0：can not be extended
1：can be extended
	 */
	@Column(name="IS_EXTENSIBLE",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="isExtensible")
	private Integer isExtensible;

	/**
	 * A rule or principle represented in symbols, numbers, or letters, often in the form of an equation used to derive the value of a characteristic value.
	 */
	@Column(name="DERIVATION_FORMULA",columnDefinition="Varchar",length=1024)
	@XmlElement(name="derivationFormula")
	private String derivationFormula;

	/**
	 * Product specification characteristic, such as color, whose may be assigned during the ordering or some other process.
An indicator that specifies that the ProductSpecCharacteristic is configurable or not.
enum：
0：can not configure dynamically
1：configure dynamically
	 */
	@Column(name="IS_CONFIGURABLE",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="isConfigurable")
	private Integer isConfigurable;

	/**
	 * effective date
	 */
	@Column(name="VALID_DATE",columnDefinition="TimeStamp")
	@XmlElement(name="validDate")
	private Date validDate;

	/**
	 * expiring date
	 */
	@Column(name="EXPIRE_DATE",columnDefinition="TimeStamp")
	@XmlElement(name="expireDate")
	private Date expireDate;

	public void setSpecCharId(Integer obj){
		this.specCharId = obj;
	}

	public Integer getSpecCharId(){
		return specCharId;
	}

	public void setName(String obj){
		this.name = obj;
	}

	public String getName(){
		return name;
	}

	public void setDescription(String obj){
		this.description = obj;
	}

	public String getDescription(){
		return description;
	}

	public void setIsUnique(Integer obj){
		this.isUnique = obj;
	}

	public Integer getIsUnique(){
		return isUnique;
	}

	public void setValueTypeId(Integer obj){
		this.valueTypeId = obj;
	}

	public Integer getValueTypeId(){
		return valueTypeId;
	}

	public void setMinCardinality(Long obj){
		this.minCardinality = obj;
	}

	public Long getMinCardinality(){
		return minCardinality;
	}

	public void setMaxCardinality(Long obj){
		this.maxCardinality = obj;
	}

	public Long getMaxCardinality(){
		return maxCardinality;
	}

	public void setIsExtensible(Integer obj){
		this.isExtensible = obj;
	}

	public Integer getIsExtensible(){
		return isExtensible;
	}

	public void setDerivationFormula(String obj){
		this.derivationFormula = obj;
	}

	public String getDerivationFormula(){
		return derivationFormula;
	}

	public void setIsConfigurable(Integer obj){
		this.isConfigurable = obj;
	}

	public Integer getIsConfigurable(){
		return isConfigurable;
	}

	public void setValidDate(Date obj){
		this.validDate = obj;
	}

	public Date getValidDate(){
		return validDate;
	}

	public void setExpireDate(Date obj){
		this.expireDate = obj;
	}

	public Date getExpireDate(){
		return expireDate;
	}

	public PmProductSpecChar(){
	}

	public PmProductSpecChar(Integer specCharId){
		this.specCharId = specCharId;
	}

	public boolean equals(final Object rhs0){
		if (rhs0 == null)return false;
		PmProductSpecChar rhs=(PmProductSpecChar)rhs0;
		if(!ObjectUtils.equals(specCharId, rhs.specCharId)) return false;
		return super.isEquals(rhs);
	}

	public int hashCode(){
		return new HashCodeBuilder()
		.append(specCharId)
		.append(super.getHashCode())
		.toHashCode();
	}


public enum Field implements jef.database.Field{specCharId,name,description,isUnique,valueTypeId,minCardinality,maxCardinality,isExtensible,derivationFormula,isConfigurable,validDate,expireDate}
}