package com.ailk.openbilling.persistence.pm.entity;

import javax.persistence.Table;
import jef.database.DataObject;
import javax.persistence.Id;
import javax.persistence.GenerationType;
import javax.persistence.GeneratedValue;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAccessType;
import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.lang.builder.HashCodeBuilder;
import jef.codegen.support.NotModified;
/**
 * This class was generated by EasyFrame according to the table in database.
 * You need to modify the type of primary key field, to the strategy your own.
 * 
 */
@NotModified
@Entity
@Table(schema="PD",name="PM_ACCUMULATE_ITEM_DEF")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(propOrder={"accumulateItem","name","measureId","description","accumulateType","segId","accumulateClass","accumulateUse","dependProdFlag"})
public class PmAccumulateItemDef extends DataObject{


	/**
	 * accumulated charging item
	 */
	@GeneratedValue(strategy=GenerationType.SEQUENCE)
	@Id
	@Column(name="ACCUMULATE_ITEM",precision=10,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="accumulateItem")
	private Integer accumulateItem;

	/**
	 * name of accumulate item
	 */
	@Column(name="NAME",columnDefinition="Varchar",length=256)
	@XmlElement(name="name")
	private String name;

	/**
	 * unit of accumulation
	 */
	@Column(name="MEASURE_ID",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="measureId")
	private Integer measureId;

	/**
	 * description
	 */
	@Column(name="DESCRIPTION",columnDefinition="Varchar",length=1024)
	@XmlElement(name="description")
	private String description;

	@Column(name="ACCUMULATE_TYPE",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="accumulateType")
	private Integer accumulateType;

	@Column(name="SEG_ID",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="segId")
	private Integer segId;

	@Column(name="ACCUMULATE_CLASS",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="accumulateClass")
	private Integer accumulateClass;

	@Column(name="ACCUMULATE_USE",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="accumulateUse")
	private Integer accumulateUse;

	@Column(name="DEPEND_PROD_FLAG",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="dependProdFlag")
	private Integer dependProdFlag;

	public void setAccumulateItem(Integer obj){
		this.accumulateItem = obj;
	}

	public Integer getAccumulateItem(){
		return accumulateItem;
	}

	public void setName(String obj){
		this.name = obj;
	}

	public String getName(){
		return name;
	}

	public void setMeasureId(Integer obj){
		this.measureId = obj;
	}

	public Integer getMeasureId(){
		return measureId;
	}

	public void setDescription(String obj){
		this.description = obj;
	}

	public String getDescription(){
		return description;
	}

	public void setAccumulateType(Integer obj){
		this.accumulateType = obj;
	}

	public Integer getAccumulateType(){
		return accumulateType;
	}

	public void setSegId(Integer obj){
		this.segId = obj;
	}

	public Integer getSegId(){
		return segId;
	}

	public void setAccumulateClass(Integer obj){
		this.accumulateClass = obj;
	}

	public Integer getAccumulateClass(){
		return accumulateClass;
	}

	public void setAccumulateUse(Integer obj){
		this.accumulateUse = obj;
	}

	public Integer getAccumulateUse(){
		return accumulateUse;
	}

	public void setDependProdFlag(Integer obj){
		this.dependProdFlag = obj;
	}

	public Integer getDependProdFlag(){
		return dependProdFlag;
	}

	public PmAccumulateItemDef(){
	}

	public PmAccumulateItemDef(Integer accumulateItem){
		this.accumulateItem = accumulateItem;
	}

	public boolean equals(final Object rhs0){
		if (rhs0 == null)return false;
		PmAccumulateItemDef rhs=(PmAccumulateItemDef)rhs0;
		if(!ObjectUtils.equals(accumulateItem, rhs.accumulateItem)) return false;
		return super.isEquals(rhs);
	}

	public int hashCode(){
		return new HashCodeBuilder()
		.append(accumulateItem)
		.append(super.getHashCode())
		.toHashCode();
	}


public enum Field implements jef.database.Field{accumulateItem,name,measureId,description,accumulateType,segId,accumulateClass,accumulateUse,dependProdFlag}
}