package com.ailk.openbilling.persistence.pm.entity;

import javax.persistence.Table;
import jef.database.DataObject;
import javax.persistence.Id;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAccessType;
import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.lang.builder.HashCodeBuilder;
import jef.codegen.support.NotModified;
/**
 * This class was generated by EasyFrame according to the table in database.
 * You need to modify the type of primary key field, to the strategy your own.
 * 
 */
@NotModified
@Entity
@Table(schema="PD",name="PM_RENT_DEDUCT_FAILURE")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(propOrder={"failureRuleId","deductTime","failureActionId","haveDelayAction","delayCycleUnit","delayCycleType","delayActionId"})
public class PmRentDeductFailure extends DataObject{


	/**
	 * Processing rules after recurring fee deduction failure
	 */
	@Id
	@Column(name="FAILURE_RULE_ID",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="failureRuleId")
	private Integer failureRuleId;

	/**
	 * retry_threshlod为触发此动作的扣费次数
比如首次扣减失败，on top promotion 挂起，这时，retry_threshlod填1，act_type为执行的动作，填1：普通销售品扣费失败挂起。
支持配置多条，如果之后要求最大重试次数后，还失败，则terminate，需要再加一条记录，这时，retry_threshlod填-1，act_type为执行的动作，填4: 普通产品:terminate。
	 */
	@Id
	@Column(name="DEDUCT_TIME",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="deductTime")
	private Integer deductTime;

	/**
	 * Action type after recurring fee deduction failure:
0: No processing
1: Deduction failure suspend for promotion product offering
2: deduction failure of main promotion leads to special stauts
3: Main product offering switch (Change main product offering N days later)
	 */
	@Column(name="FAILURE_ACTION_ID",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="failureActionId")
	private Integer failureActionId;

	/**
	 * 是否有延迟触发的动作
0：No（没有）
1：Yes（有）
	 */
	@Column(name="HAVE_DELAY_ACTION",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="haveDelayAction")
	private Integer haveDelayAction;

	@Column(name="DELAY_CYCLE_UNIT",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="delayCycleUnit")
	private Integer delayCycleUnit;

	/**
	 * 1	by the Day
2	by the Month
3	by the Bill
4	by the Hour
	 */
	@Column(name="DELAY_CYCLE_TYPE",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="delayCycleType")
	private Integer delayCycleType;

	/**
	 * 延迟触发的动作
	 */
	@Column(name="DELAY_ACTION_ID",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="delayActionId")
	private Integer delayActionId;

	public void setFailureRuleId(Integer obj){
		this.failureRuleId = obj;
	}

	public Integer getFailureRuleId(){
		return failureRuleId;
	}

	public void setDeductTime(Integer obj){
		this.deductTime = obj;
	}

	public Integer getDeductTime(){
		return deductTime;
	}

	public void setFailureActionId(Integer obj){
		this.failureActionId = obj;
	}

	public Integer getFailureActionId(){
		return failureActionId;
	}

	public void setHaveDelayAction(Integer obj){
		this.haveDelayAction = obj;
	}

	public Integer getHaveDelayAction(){
		return haveDelayAction;
	}

	public void setDelayCycleUnit(Integer obj){
		this.delayCycleUnit = obj;
	}

	public Integer getDelayCycleUnit(){
		return delayCycleUnit;
	}

	public void setDelayCycleType(Integer obj){
		this.delayCycleType = obj;
	}

	public Integer getDelayCycleType(){
		return delayCycleType;
	}

	public void setDelayActionId(Integer obj){
		this.delayActionId = obj;
	}

	public Integer getDelayActionId(){
		return delayActionId;
	}

	public PmRentDeductFailure(){
	}

	public PmRentDeductFailure(Integer failureRuleId,Integer deductTime){
		this.failureRuleId = failureRuleId;
		this.deductTime = deductTime;
	}

	public boolean equals(final Object rhs0){
		if (rhs0 == null)return false;
		PmRentDeductFailure rhs=(PmRentDeductFailure)rhs0;
		if(!ObjectUtils.equals(deductTime, rhs.deductTime)) return false;
		if(!ObjectUtils.equals(failureRuleId, rhs.failureRuleId)) return false;
		return super.isEquals(rhs);
	}

	public int hashCode(){
		return new HashCodeBuilder()
		.append(deductTime)
		.append(failureRuleId)
		.append(super.getHashCode())
		.toHashCode();
	}


public enum Field implements jef.database.Field{failureRuleId,deductTime,failureActionId,haveDelayAction,delayCycleUnit,delayCycleType,delayActionId}
}