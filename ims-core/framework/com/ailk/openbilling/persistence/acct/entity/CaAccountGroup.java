package com.ailk.openbilling.persistence.acct.entity;

import javax.persistence.Table;
import jef.database.DataObject;
import javax.persistence.Id;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAccessType;
import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.Date;
import jef.codegen.support.NotModified;
/**
 * This class was generated by EasyFrame according to the table in database.
 * You need to modify the type of primary key field, to the strategy your own.
 * 
 */
@NotModified
@Entity
@Table(schema="AD",name="CA_ACCOUNT_GROUP")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(propOrder={"acctId","accountType","groupName","maxusers","maxclosenum","maxoutnum","memberNumber","freeresShareFlag","clipFlag","outgoingCsFlag","ocsRoutingFlag","espaceFlag","contactPhone","ingroupOutgoingcall","ingroupIncomingcall","crossgroupOutgoingcall","crossgroupIncomingcall","specOutgoingcall","specIncomingcall","outgroupOutgoingcall","outgroupIncomingcall","remarks","soNbr","createDate","soDate","validDate","expireDate"})
public class CaAccountGroup extends DataObject{


	/**
	 * A unique identifier of account.
	 */
	@Id
	@Column(name="ACCT_ID",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="acctId")
	private Long acctId;

	/**
	 * Account types

Concrete CA:
101-Individual
102-Family
103-Group

Virtual account(GCA):
201--VPN
202--Corporation
203--Community (vpn)
204--virtual Family (vpn)
205--CUG group (vpn)
206--VPBX group (vpn)
207 Special Number group

208-冲浪e家亲活动(vpn群，上海使用)
209-66家庭包活动(vpn群，上海使用)

CA_ACCOUNT冗余字段
	 */
	@Column(name="ACCOUNT_TYPE",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="accountType")
	private Integer accountType;

	@Column(name="GROUP_NAME",columnDefinition="Varchar",length=255,nullable=false)
	@XmlElement(name="groupName")
	private String groupName;

	/**
	 * Max user amount
	 */
	@Column(name="MAXUSERS",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="maxusers")
	private Long maxusers;

	/**
	 * Max amount of closed user group
	 */
	@Column(name="MAXCLOSENUM",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="maxclosenum")
	private Long maxclosenum;

	/**
	 * Max amount of off net number
	 */
	@Column(name="MAXOUTNUM",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="maxoutnum")
	private Long maxoutnum;

	/**
	 * Current member number
	 */
	@Column(name="MEMBER_NUMBER",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="memberNumber")
	private Long memberNumber;

	@Column(name="FREERES_SHARE_FLAG",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="freeresShareFlag")
	private Integer freeresShareFlag;

	@Column(name="CLIP_FLAG",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="clipFlag")
	private Long clipFlag;

	@Column(name="OUTGOING_CS_FLAG",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="outgoingCsFlag")
	private Long outgoingCsFlag;

	@Column(name="OCS_ROUTING_FLAG",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="ocsRoutingFlag")
	private Long ocsRoutingFlag;

	@Column(name="ESPACE_FLAG",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="espaceFlag")
	private Long espaceFlag;

	@Column(name="CONTACT_PHONE",columnDefinition="Varchar",length=64,nullable=false)
	@XmlElement(name="contactPhone")
	private String contactPhone;

	/**
	 * 0：reject 
1：continue
	 */
	@Column(name="INGROUP_OUTGOINGCALL",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="ingroupOutgoingcall")
	private Integer ingroupOutgoingcall;

	/**
	 * 0：reject 
1：continue
	 */
	@Column(name="INGROUP_INCOMINGCALL",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="ingroupIncomingcall")
	private Integer ingroupIncomingcall;

	/**
	 * 0：reject 
1：continue
	 */
	@Column(name="CROSSGROUP_OUTGOINGCALL",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="crossgroupOutgoingcall")
	private Integer crossgroupOutgoingcall;

	/**
	 * 0：reject 
1：continue
	 */
	@Column(name="CROSSGROUP_INCOMINGCALL",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="crossgroupIncomingcall")
	private Integer crossgroupIncomingcall;

	/**
	 * 0：reject 
1：continue
	 */
	@Column(name="SPEC_OUTGOINGCALL",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="specOutgoingcall")
	private Integer specOutgoingcall;

	/**
	 * 0：reject 
1：continue
	 */
	@Column(name="SPEC_INCOMINGCALL",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="specIncomingcall")
	private Integer specIncomingcall;

	/**
	 * 0：reject 
1：continue
	 */
	@Column(name="OUTGROUP_OUTGOINGCALL",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="outgroupOutgoingcall")
	private Integer outgroupOutgoingcall;

	/**
	 * 0：reject 
1：continue
	 */
	@Column(name="OUTGROUP_INCOMINGCALL",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="outgroupIncomingcall")
	private Integer outgroupIncomingcall;

	/**
	 * remarks
	 */
	@Column(name="REMARKS",columnDefinition="Varchar",length=256,nullable=false)
	@XmlElement(name="remarks")
	private String remarks;

	/**
	 * Subscription order associated to account
	 */
	@Id
	@Column(name="SO_NBR",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="soNbr")
	private Long soNbr;

	/**
	 * Creation date of current record
	 */
	@Column(name="CREATE_DATE",columnDefinition="TimeStamp")
	@XmlElement(name="createDate")
	private Date createDate;

	/**
	 * Modification date of current record
	 */
	@Column(name="SO_DATE",columnDefinition="TimeStamp",nullable=false)
	@XmlElement(name="soDate")
	private Date soDate;

	/**
	 * YYYY-MM-DD HH:MM:SS
	 */
	@Id
	@Column(name="VALID_DATE",columnDefinition="TimeStamp")
	@XmlElement(name="validDate")
	private Date validDate;

	/**
	 * YYYY-MM-DD HH:MM:SS
	 */
	@Column(name="EXPIRE_DATE",columnDefinition="TimeStamp")
	@XmlElement(name="expireDate")
	private Date expireDate;

	public void setAcctId(Long obj){
		this.acctId = obj;
	}

	public Long getAcctId(){
		return acctId;
	}

	public void setAccountType(Integer obj){
		this.accountType = obj;
	}

	public Integer getAccountType(){
		return accountType;
	}

	public void setGroupName(String obj){
		this.groupName = obj;
	}

	public String getGroupName(){
		return groupName;
	}

	public void setMaxusers(Long obj){
		this.maxusers = obj;
	}

	public Long getMaxusers(){
		return maxusers;
	}

	public void setMaxclosenum(Long obj){
		this.maxclosenum = obj;
	}

	public Long getMaxclosenum(){
		return maxclosenum;
	}

	public void setMaxoutnum(Long obj){
		this.maxoutnum = obj;
	}

	public Long getMaxoutnum(){
		return maxoutnum;
	}

	public void setMemberNumber(Long obj){
		this.memberNumber = obj;
	}

	public Long getMemberNumber(){
		return memberNumber;
	}

	public void setFreeresShareFlag(Integer obj){
		this.freeresShareFlag = obj;
	}

	public Integer getFreeresShareFlag(){
		return freeresShareFlag;
	}

	public void setClipFlag(Long obj){
		this.clipFlag = obj;
	}

	public Long getClipFlag(){
		return clipFlag;
	}

	public void setOutgoingCsFlag(Long obj){
		this.outgoingCsFlag = obj;
	}

	public Long getOutgoingCsFlag(){
		return outgoingCsFlag;
	}

	public void setOcsRoutingFlag(Long obj){
		this.ocsRoutingFlag = obj;
	}

	public Long getOcsRoutingFlag(){
		return ocsRoutingFlag;
	}

	public void setEspaceFlag(Long obj){
		this.espaceFlag = obj;
	}

	public Long getEspaceFlag(){
		return espaceFlag;
	}

	public void setContactPhone(String obj){
		this.contactPhone = obj;
	}

	public String getContactPhone(){
		return contactPhone;
	}

	public void setIngroupOutgoingcall(Integer obj){
		this.ingroupOutgoingcall = obj;
	}

	public Integer getIngroupOutgoingcall(){
		return ingroupOutgoingcall;
	}

	public void setIngroupIncomingcall(Integer obj){
		this.ingroupIncomingcall = obj;
	}

	public Integer getIngroupIncomingcall(){
		return ingroupIncomingcall;
	}

	public void setCrossgroupOutgoingcall(Integer obj){
		this.crossgroupOutgoingcall = obj;
	}

	public Integer getCrossgroupOutgoingcall(){
		return crossgroupOutgoingcall;
	}

	public void setCrossgroupIncomingcall(Integer obj){
		this.crossgroupIncomingcall = obj;
	}

	public Integer getCrossgroupIncomingcall(){
		return crossgroupIncomingcall;
	}

	public void setSpecOutgoingcall(Integer obj){
		this.specOutgoingcall = obj;
	}

	public Integer getSpecOutgoingcall(){
		return specOutgoingcall;
	}

	public void setSpecIncomingcall(Integer obj){
		this.specIncomingcall = obj;
	}

	public Integer getSpecIncomingcall(){
		return specIncomingcall;
	}

	public void setOutgroupOutgoingcall(Integer obj){
		this.outgroupOutgoingcall = obj;
	}

	public Integer getOutgroupOutgoingcall(){
		return outgroupOutgoingcall;
	}

	public void setOutgroupIncomingcall(Integer obj){
		this.outgroupIncomingcall = obj;
	}

	public Integer getOutgroupIncomingcall(){
		return outgroupIncomingcall;
	}

	public void setRemarks(String obj){
		this.remarks = obj;
	}

	public String getRemarks(){
		return remarks;
	}

	public void setSoNbr(Long obj){
		this.soNbr = obj;
	}

	public Long getSoNbr(){
		return soNbr;
	}

	public void setCreateDate(Date obj){
		this.createDate = obj;
	}

	public Date getCreateDate(){
		return createDate;
	}

	public void setSoDate(Date obj){
		this.soDate = obj;
	}

	public Date getSoDate(){
		return soDate;
	}

	public void setValidDate(Date obj){
		this.validDate = obj;
	}

	public Date getValidDate(){
		return validDate;
	}

	public void setExpireDate(Date obj){
		this.expireDate = obj;
	}

	public Date getExpireDate(){
		return expireDate;
	}

	public CaAccountGroup(){
	}

	public CaAccountGroup(Long acctId,Long soNbr,Date validDate){
		this.acctId = acctId;
		this.soNbr = soNbr;
		this.validDate = validDate;
	}

	public boolean equals(final Object rhs0){
		if (rhs0 == null)return false;
		CaAccountGroup rhs=(CaAccountGroup)rhs0;
		if(!ObjectUtils.equals(acctId, rhs.acctId)) return false;
		if(!ObjectUtils.equals(validDate, rhs.validDate)) return false;
		if(!ObjectUtils.equals(soNbr, rhs.soNbr)) return false;
		return super.isEquals(rhs);
	}

	public int hashCode(){
		return new HashCodeBuilder()
		.append(acctId)
		.append(validDate)
		.append(soNbr)
		.append(super.getHashCode())
		.toHashCode();
	}


public enum Field implements jef.database.Field{acctId,accountType,groupName,maxusers,maxclosenum,maxoutnum,memberNumber,freeresShareFlag,clipFlag,outgoingCsFlag,ocsRoutingFlag,espaceFlag,contactPhone,ingroupOutgoingcall,ingroupIncomingcall,crossgroupOutgoingcall,crossgroupIncomingcall,specOutgoingcall,specIncomingcall,outgroupOutgoingcall,outgroupIncomingcall,remarks,soNbr,createDate,soDate,validDate,expireDate}
}