package com.ailk.openbilling.persistence.acct.entity;

import javax.persistence.Table;
import jef.database.DataObject;
import javax.persistence.Id;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAccessType;
import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.Date;
import jef.codegen.support.NotModified;
/**
 * This class was generated by EasyFrame according to the table in database.
 * You need to modify the type of primary key field, to the strategy your own.
 * 
 */
@NotModified
@Entity
@Table(schema="AD",name="CA_BANK_FUND")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(propOrder={"assetId","fundType","fundItem","validDate","expireDate","sts","acctId","createDate","bankId","bankAcctNo","bankAcctName","bankAcctLimit","measureId","soNbr","soDate"})
public class CaBankFund extends DataObject{


	/**
	 * Asset ID
	 */
	@Id
	@Column(name="ASSET_ID",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="assetId")
	private Long assetId;

	/**
	 * Bank fund type:

0- Common account
1- Debit card
	 */
	@Column(name="FUND_TYPE",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="fundType")
	private Integer fundType;

	/**
	 * Bank fund item
	 */
	@Column(name="FUND_ITEM",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="fundItem")
	private Integer fundItem;

	/**
	 * The format of valid date for account book is as follows:
YYYY-MM-DD HH:MM:SS
	 */
	@Id
	@Column(name="VALID_DATE",columnDefinition="TimeStamp",nullable=false)
	@XmlElement(name="validDate")
	private Date validDate;

	/**
	 * Specific expired date of account book
	 */
	@Column(name="EXPIRE_DATE",columnDefinition="TimeStamp")
	@XmlElement(name="expireDate")
	private Date expireDate;

	/**
	 * State
0- Inactive
1- Active
	 */
	@Column(name="STS",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="sts")
	private Integer sts;

	/**
	 * Account ID
	 */
	@Column(name="ACCT_ID",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="acctId")
	private Long acctId;

	/**
	 * Created date
	 */
	@Column(name="CREATE_DATE",columnDefinition="TimeStamp")
	@XmlElement(name="createDate")
	private Date createDate;

	/**
	 * This field indicates specific bank on bank payment mode.
Each bank only has a unique identifier for bank ID in bank information table.
Carrier bank account will be saved into bank information table on collection mode.
	 */
	@Column(name="BANK_ID",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="bankId")
	private Integer bankId;

	/**
	 * Bank accounr or credit card, etc, supported by digit and letter combination
	 */
	@Column(name="BANK_ACCT_NO",columnDefinition="Varchar",length=64)
	@XmlElement(name="bankAcctNo")
	private String bankAcctNo;

	/**
	 * Specific account name corresponding with bank account
	 */
	@Column(name="BANK_ACCT_NAME",columnDefinition="Varchar",length=256)
	@XmlElement(name="bankAcctName")
	private String bankAcctName;

	/**
	 * Bank account limit
	 */
	@Column(name="BANK_ACCT_LIMIT",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="bankAcctLimit")
	private Long bankAcctLimit;

	/**
	 * Measure ID: a unique identifier
For example:
RMB unit hao--10401
RMB unit li--10402
RMB unit fen--10403
RMB unit yuan--10404

Cent--10201
Dollar--10202
	 */
	@Column(name="MEASURE_ID",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="measureId")
	private Integer measureId;

	/**
	 * Associated work order when account book is created.
	 */
	@Id
	@Column(name="SO_NBR",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="soNbr")
	private Long soNbr;

	@Column(name="SO_DATE",columnDefinition="TimeStamp")
	@XmlElement(name="soDate")
	private Date soDate;

	public void setAssetId(Long obj){
		this.assetId = obj;
	}

	public Long getAssetId(){
		return assetId;
	}

	public void setFundType(Integer obj){
		this.fundType = obj;
	}

	public Integer getFundType(){
		return fundType;
	}

	public void setFundItem(Integer obj){
		this.fundItem = obj;
	}

	public Integer getFundItem(){
		return fundItem;
	}

	public void setValidDate(Date obj){
		this.validDate = obj;
	}

	public Date getValidDate(){
		return validDate;
	}

	public void setExpireDate(Date obj){
		this.expireDate = obj;
	}

	public Date getExpireDate(){
		return expireDate;
	}

	public void setSts(Integer obj){
		this.sts = obj;
	}

	public Integer getSts(){
		return sts;
	}

	public void setAcctId(Long obj){
		this.acctId = obj;
	}

	public Long getAcctId(){
		return acctId;
	}

	public void setCreateDate(Date obj){
		this.createDate = obj;
	}

	public Date getCreateDate(){
		return createDate;
	}

	public void setBankId(Integer obj){
		this.bankId = obj;
	}

	public Integer getBankId(){
		return bankId;
	}

	public void setBankAcctNo(String obj){
		this.bankAcctNo = obj;
	}

	public String getBankAcctNo(){
		return bankAcctNo;
	}

	public void setBankAcctName(String obj){
		this.bankAcctName = obj;
	}

	public String getBankAcctName(){
		return bankAcctName;
	}

	public void setBankAcctLimit(Long obj){
		this.bankAcctLimit = obj;
	}

	public Long getBankAcctLimit(){
		return bankAcctLimit;
	}

	public void setMeasureId(Integer obj){
		this.measureId = obj;
	}

	public Integer getMeasureId(){
		return measureId;
	}

	public void setSoNbr(Long obj){
		this.soNbr = obj;
	}

	public Long getSoNbr(){
		return soNbr;
	}

	public void setSoDate(Date obj){
		this.soDate = obj;
	}

	public Date getSoDate(){
		return soDate;
	}

	public CaBankFund(){
	}

	public CaBankFund(Long assetId,Date validDate,Long soNbr){
		this.assetId = assetId;
		this.validDate = validDate;
		this.soNbr = soNbr;
	}

	public boolean equals(final Object rhs0){
		if (rhs0 == null)return false;
		CaBankFund rhs=(CaBankFund)rhs0;
		if(!ObjectUtils.equals(assetId, rhs.assetId)) return false;
		if(!ObjectUtils.equals(validDate, rhs.validDate)) return false;
		if(!ObjectUtils.equals(soNbr, rhs.soNbr)) return false;
		return super.isEquals(rhs);
	}

	public int hashCode(){
		return new HashCodeBuilder()
		.append(assetId)
		.append(validDate)
		.append(soNbr)
		.append(super.getHashCode())
		.toHashCode();
	}


public enum Field implements jef.database.Field{assetId,fundType,fundItem,validDate,expireDate,sts,acctId,createDate,bankId,bankAcctNo,bankAcctName,bankAcctLimit,measureId,soNbr,soDate}
}