package com.ailk.openbilling.persistence.acct.entity;

import javax.persistence.Table;
import jef.database.DataObject;
import javax.persistence.Id;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAccessType;
import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.Date;
import jef.codegen.support.NotModified;
/**
 * This class was generated by EasyFrame according to the table in database.
 * You need to modify the type of primary key field, to the strategy your own.
 * 
 */
@NotModified
@Entity
@Table(schema="ad",name="CA_RES_GRP_REVS")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(propOrder={"resourceId","acctId","relationshipType","validDate","expireDate","createDate","soNbr","soDate"})
public class CaResGrpRevs extends DataObject{


	/**
	 * Resource ID
	 */
	@Id
	@Column(name="RESOURCE_ID",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="resourceId")
	private Long resourceId;

	/**
	 * Account must be a virtual account when relationship is virtual group.
	 */
	@Id
	@Column(name="ACCT_ID",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="acctId")
	private Long acctId;

	/**
	 * 0 group hierarchy member - record the subscriber under concrete account
1 Automtic group member - record the hierarchy relation built automatically between a concrete account and its adscript subscriber when the account has group product or join the hierarchy.
2 Group member - record the subscriber under virtual account, such as VPN
3 Specific number - record the specific number under virtual account
	 */
	@Id
	@Column(name="RELATIONSHIP_TYPE",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="relationshipType")
	private Integer relationshipType;

	/**
	 * ????
	 */
	@Id
	@Column(name="VALID_DATE",columnDefinition="TimeStamp",nullable=false)
	@XmlElement(name="validDate")
	private Date validDate;

	/**
	 * Expired date
	 */
	@Column(name="EXPIRE_DATE",columnDefinition="TimeStamp")
	@XmlElement(name="expireDate")
	private Date expireDate;

	/**
	 * Creation date of current record
	 */
	@Column(name="CREATE_DATE",columnDefinition="TimeStamp",nullable=false)
	@XmlElement(name="createDate")
	private Date createDate;

	/**
	 * Subscription order associated to account
	 */
	@Id
	@Column(name="SO_NBR",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="soNbr")
	private Long soNbr;

	/**
	 * Modification date of current record
	 */
	@Column(name="SO_DATE",columnDefinition="TimeStamp")
	@XmlElement(name="soDate")
	private Date soDate;

	public void setResourceId(Long obj){
		this.resourceId = obj;
	}

	public Long getResourceId(){
		return resourceId;
	}

	public void setAcctId(Long obj){
		this.acctId = obj;
	}

	public Long getAcctId(){
		return acctId;
	}

	public void setRelationshipType(Integer obj){
		this.relationshipType = obj;
	}

	public Integer getRelationshipType(){
		return relationshipType;
	}

	public void setValidDate(Date obj){
		this.validDate = obj;
	}

	public Date getValidDate(){
		return validDate;
	}

	public void setExpireDate(Date obj){
		this.expireDate = obj;
	}

	public Date getExpireDate(){
		return expireDate;
	}

	public void setCreateDate(Date obj){
		this.createDate = obj;
	}

	public Date getCreateDate(){
		return createDate;
	}

	public void setSoNbr(Long obj){
		this.soNbr = obj;
	}

	public Long getSoNbr(){
		return soNbr;
	}

	public void setSoDate(Date obj){
		this.soDate = obj;
	}

	public Date getSoDate(){
		return soDate;
	}

	public CaResGrpRevs(){
	}

	public CaResGrpRevs(Long resourceId,Long acctId,Integer relationshipType,Date validDate,Long soNbr){
		this.resourceId = resourceId;
		this.acctId = acctId;
		this.relationshipType = relationshipType;
		this.validDate = validDate;
		this.soNbr = soNbr;
	}

	public boolean equals(final Object rhs0){
		if (rhs0 == null)return false;
		CaResGrpRevs rhs=(CaResGrpRevs)rhs0;
		if(!ObjectUtils.equals(relationshipType, rhs.relationshipType)) return false;
		if(!ObjectUtils.equals(resourceId, rhs.resourceId)) return false;
		if(!ObjectUtils.equals(acctId, rhs.acctId)) return false;
		if(!ObjectUtils.equals(validDate, rhs.validDate)) return false;
		if(!ObjectUtils.equals(soNbr, rhs.soNbr)) return false;
		return super.isEquals(rhs);
	}

	public int hashCode(){
		return new HashCodeBuilder()
		.append(relationshipType)
		.append(resourceId)
		.append(acctId)
		.append(validDate)
		.append(soNbr)
		.append(super.getHashCode())
		.toHashCode();
	}


public enum Field implements jef.database.Field{resourceId,acctId,relationshipType,validDate,expireDate,createDate,soNbr,soDate}
}