package com.ailk.openbilling.persistence.sys.entity;

import javax.persistence.Table;
import jef.database.DataObject;
import javax.persistence.Id;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAccessType;
import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.lang.builder.HashCodeBuilder;
import jef.codegen.support.NotModified;
/**
 * This class was generated by EasyFrame according to the table in database.
 * You need to modify the type of primary key field, to the strategy your own.
 * 
 */
@NotModified
@Entity
@Table(schema="sd",name="SYS_MEASURE_UNIT_EXCHANGE")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(propOrder={"measureId","destMeasureId","measureExchangeId","exchangeNumerator","exchangeDenominator"})
public class SysMeasureUnitExchange extends DataObject{


	/**
	 * Measurement ID, a unique identifier: RMB Hao--10401  RMB Li--10402 RMB Fen--10403  RMB Yuan--10404
USD Cent--10201   USD Dollar--10202
	 */
	@Id
	@Column(name="MEASURE_ID",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="measureId")
	private Integer measureId;

	/**
	 * Target measurement ID
	 */
	@Id
	@Column(name="DEST_MEASURE_ID",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="destMeasureId")
	private Integer destMeasureId;

	/**
	 * Measurement exchange rule ID.  Fill in 0 for different measurements exchange
	 */
	@Column(name="MEASURE_EXCHANGE_ID",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="measureExchangeId")
	private Integer measureExchangeId;

	/**
	 * Exchange numerator, for instance, RMB Fen : RMB Li =10:1, RMB Yuan: RMB Li = 100:1
	 */
	@Column(name="EXCHANGE_NUMERATOR",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="exchangeNumerator")
	private Integer exchangeNumerator;

	/**
	 * Exchange denominator
	 */
	@Column(name="EXCHANGE_DENOMINATOR",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="exchangeDenominator")
	private Integer exchangeDenominator;

	public void setMeasureId(Integer obj){
		this.measureId = obj;
	}

	public Integer getMeasureId(){
		return measureId;
	}

	public void setDestMeasureId(Integer obj){
		this.destMeasureId = obj;
	}

	public Integer getDestMeasureId(){
		return destMeasureId;
	}

	public void setMeasureExchangeId(Integer obj){
		this.measureExchangeId = obj;
	}

	public Integer getMeasureExchangeId(){
		return measureExchangeId;
	}

	public void setExchangeNumerator(Integer obj){
		this.exchangeNumerator = obj;
	}

	public Integer getExchangeNumerator(){
		return exchangeNumerator;
	}

	public void setExchangeDenominator(Integer obj){
		this.exchangeDenominator = obj;
	}

	public Integer getExchangeDenominator(){
		return exchangeDenominator;
	}

	public SysMeasureUnitExchange(){
	}

	public SysMeasureUnitExchange(Integer measureId,Integer destMeasureId){
		this.measureId = measureId;
		this.destMeasureId = destMeasureId;
	}

	public boolean equals(final Object rhs0){
		if (rhs0 == null)return false;
		SysMeasureUnitExchange rhs=(SysMeasureUnitExchange)rhs0;
		if(!ObjectUtils.equals(destMeasureId, rhs.destMeasureId)) return false;
		if(!ObjectUtils.equals(measureId, rhs.measureId)) return false;
		return super.isEquals(rhs);
	}

	public int hashCode(){
		return new HashCodeBuilder()
		.append(destMeasureId)
		.append(measureId)
		.append(super.getHashCode())
		.toHashCode();
	}


public enum Field implements jef.database.Field{measureId,destMeasureId,measureExchangeId,exchangeNumerator,exchangeDenominator}
}