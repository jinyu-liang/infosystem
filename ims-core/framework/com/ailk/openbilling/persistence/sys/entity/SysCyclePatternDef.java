package com.ailk.openbilling.persistence.sys.entity;

import javax.persistence.Table;
import jef.database.DataObject;
import javax.persistence.Id;
import javax.persistence.GenerationType;
import javax.persistence.GeneratedValue;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAccessType;
import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.lang.builder.HashCodeBuilder;
import jef.codegen.support.NotModified;
/**
 * This class was generated by EasyFrame according to the table in database.
 * You need to modify the type of primary key field, to the strategy your own.
 */
@NotModified
@Entity
@Table(schema="SD",name="SYS_CYCLE_PATTERN_DEF")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(propOrder={"patternId","patternType","patternName","priority","normalInitSts","batchInitSts","description"})
public class SysCyclePatternDef extends DataObject{


	/**
	 * Pattern ID
	 */
	@GeneratedValue(strategy=GenerationType.SEQUENCE)
	@Id
	@Column(name="PATTERN_ID",precision=10,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="patternId")
	private Integer patternId;

	/**
	 * Pattern type: 0- Device level  1 Service level
	 */
	@Column(name="PATTERN_TYPE",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="patternType")
	private Integer patternType;

	/**
	 * Pattern name
	 */
	@Column(name="PATTERN_NAME",columnDefinition="Varchar",length=256,nullable=false)
	@XmlElement(name="patternName")
	private String patternName;

	/**
	 * Priority Larger value, higher priority.
	 */
	@Column(name="PRIORITY",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="priority")
	private Integer priority;

	/**
	 * Real-time connect interface, initial state of corresponding mode
	 */
	@Column(name="NORMAL_INIT_STS",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="normalInitSts")
	private Integer normalInitSts;

	/**
	 * Batch connect interface, initial state of corresponding mode
	 */
	@Column(name="BATCH_INIT_STS",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="batchInitSts")
	private Integer batchInitSts;

	/**
	 * Description
	 */
	@Column(name="DESCRIPTION",columnDefinition="Varchar",length=512,nullable=false)
	@XmlElement(name="description")
	private String description;

	public void setPatternId(Integer obj){
		this.patternId = obj;
	}

	public Integer getPatternId(){
		return patternId;
	}

	public void setPatternType(Integer obj){
		this.patternType = obj;
	}

	public Integer getPatternType(){
		return patternType;
	}

	public void setPatternName(String obj){
		this.patternName = obj;
	}

	public String getPatternName(){
		return patternName;
	}

	public void setPriority(Integer obj){
		this.priority = obj;
	}

	public Integer getPriority(){
		return priority;
	}

	public void setNormalInitSts(Integer obj){
		this.normalInitSts = obj;
	}

	public Integer getNormalInitSts(){
		return normalInitSts;
	}

	public void setBatchInitSts(Integer obj){
		this.batchInitSts = obj;
	}

	public Integer getBatchInitSts(){
		return batchInitSts;
	}

	public void setDescription(String obj){
		this.description = obj;
	}

	public String getDescription(){
		return description;
	}

	public SysCyclePatternDef(){
	}

	public SysCyclePatternDef(Integer patternId){
		this.patternId = patternId;
	}

	public boolean equals(final Object rhs0){
		if (rhs0 == null)return false;
		SysCyclePatternDef rhs=(SysCyclePatternDef)rhs0;
		if(!ObjectUtils.equals(patternId, rhs.patternId)) return false;
		return super.isEquals(rhs);
	}

	public int hashCode(){
		return new HashCodeBuilder()
		.append(patternId)
		.append(super.getHashCode())
		.toHashCode();
	}


public enum Field implements jef.database.Field{patternId,patternType,patternName,priority,normalInitSts,batchInitSts,description}
}