package com.ailk.openbilling.persistence.sys.entity;

import javax.persistence.Table;
import jef.database.DataObject;
import javax.persistence.Id;
import javax.persistence.GenerationType;
import javax.persistence.GeneratedValue;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAccessType;
import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.lang.builder.HashCodeBuilder;
import jef.codegen.support.NotModified;
/**
 * This class was generated by EasyFrame according to the table in database.
 * You need to modify the type of primary key field, to the strategy your own.
 * 
 */
@NotModified
@Entity
@Table(schema="sd",name="SYS_MEASURE")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(propOrder={"measureId","measureTypeId","name","measureLevel","description","precisionFlag","isDisplay"})
public class SysMeasure extends DataObject{


	/**
	 * Measure ID: A unique identifier
For example:
RMB Unit hao--10401
RMB Unit li--10402
RMB Unit fen--10403
RMB Unit yuan--10404

Cent--10201
Dollar--10202
	 */
	@GeneratedValue(strategy=GenerationType.SEQUENCE)
	@Id
	@Column(name="MEASURE_ID",precision=10,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="measureId")
	private Integer measureId;

	/**
	 * Measure type: Recommended following enumeration
1：duration
2：volume
3：number of times
4：piece
5：count
6：bonus
101：SDR
102：USD
103：EURO
104：CNY
111：THB
112：VND
	 */
	@Column(name="MEASURE_TYPE_ID",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="measureTypeId")
	private Integer measureTypeId;

	/**
	 * Measure name
	 */
	@Column(name="NAME",columnDefinition="Varchar",length=256,nullable=false)
	@XmlElement(name="name")
	private String name;

	/**
	 * Level of currency unit:
When MEASURE_CLASS=0,  it refers to non-level ( default value is 0).
Commonly set unified level to distinguish:
1 --- hao
2 --- li
3 --- fen
4 --- yuan
	 */
	@Column(name="MEASURE_LEVEL",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="measureLevel")
	private Integer measureLevel;

	/**
	 * Measure unit description
	 */
	@Column(name="DESCRIPTION",columnDefinition="Varchar",length=1024)
	@XmlElement(name="description")
	private String description;

	/**
	 * 0：表示无意义，1：后台处理资金时，使用的度量精确。（每一个货币类型中，都有且只有一个IS_MAX_ACCURACY=1的精度标识）
	 */
	@Column(name="PRECISION_FLAG",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="precisionFlag")
	private Integer precisionFlag;

	/**
	 * 0：表示不用于前台显示，1：用于前台显示(每一个货币类型中，都有且只有一个IS_DISPLAY=1的显示标识)
	 */
	@Column(name="IS_DISPLAY",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="isDisplay")
	private Integer isDisplay;

	public void setMeasureId(Integer obj){
		this.measureId = obj;
	}

	public Integer getMeasureId(){
		return measureId;
	}

	public void setMeasureTypeId(Integer obj){
		this.measureTypeId = obj;
	}

	public Integer getMeasureTypeId(){
		return measureTypeId;
	}

	public void setName(String obj){
		this.name = obj;
	}

	public String getName(){
		return name;
	}

	public void setMeasureLevel(Integer obj){
		this.measureLevel = obj;
	}

	public Integer getMeasureLevel(){
		return measureLevel;
	}

	public void setDescription(String obj){
		this.description = obj;
	}

	public String getDescription(){
		return description;
	}

	public void setPrecisionFlag(Integer obj){
		this.precisionFlag = obj;
	}

	public Integer getPrecisionFlag(){
		return precisionFlag;
	}

	public void setIsDisplay(Integer obj){
		this.isDisplay = obj;
	}

	public Integer getIsDisplay(){
		return isDisplay;
	}

	public SysMeasure(){
	}

	public SysMeasure(Integer measureId){
		this.measureId = measureId;
	}

	public boolean equals(final Object rhs0){
		if (rhs0 == null)return false;
		SysMeasure rhs=(SysMeasure)rhs0;
		if(!ObjectUtils.equals(measureId, rhs.measureId)) return false;
		return super.isEquals(rhs);
	}

	public int hashCode(){
		return new HashCodeBuilder()
		.append(measureId)
		.append(super.getHashCode())
		.toHashCode();
	}


public enum Field implements jef.database.Field{measureId,measureTypeId,name,measureLevel,description,precisionFlag,isDisplay}
}