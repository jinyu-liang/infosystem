package com.ailk.openbilling.persistence.sys.entity;

import javax.persistence.Table;
import jef.database.DataObject;
import javax.persistence.Id;
import javax.persistence.GenerationType;
import javax.persistence.GeneratedValue;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAccessType;
import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.lang.builder.HashCodeBuilder;
import jef.codegen.support.NotModified;
/**
 * This class was generated by EasyFrame according to the table in database.
 * You need to modify the type of primary key field, to the strategy your own.
 * 
 */
@NotModified
@Entity
@Table(schema="sd",name="SYS_POLICY")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(propOrder={"policyId","name","useTrigger","policyExpr","description"})
public class SysPolicy extends DataObject{


	/**
	 * Policy ID, 0 for always true.
	 */
	@GeneratedValue(strategy=GenerationType.SEQUENCE)
	@Id
	@Column(name="POLICY_ID",precision=10,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="policyId")
	private Integer policyId;

	/**
	 * Policy name
	 */
	@Column(name="NAME",columnDefinition="Varchar",length=256,nullable=false)
	@XmlElement(name="name")
	private String name;

	/**
	 * Condition triggering
Conditions for different functions vary, for instance, conditions for rating elements and for promotion application vary greatly. Condition mapping to some certain expression shall be defined for prompt expression matching. Known conditions at present are as follows:
0: Rating element
1:Promotion application
3: Billing discount
4: Subject exchange
5: Recurring charge
7: SP monthly rental fee charge: solution of
	 */
	@Column(name="USE_TRIGGER",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="useTrigger")
	private Integer useTrigger;

	/**
	 * Policy expression, a rule expression such as effective condition expression ---@1006=50001 and  @1010 in (0,1,4) and ((cond.llike(@1005, 50219) and @1091 = 603) or (cond.llike(@1005, 50213) and @1091 = 603))  and calculating expression  free_res_per()>0 or get_fee(80400150,2)>0
	 */
	@Column(name="POLICY_EXPR",columnDefinition="Varchar",length=1024,nullable=false)
	@XmlElement(name="policyExpr")
	private String policyExpr;

	/**
	 * Expression statement
	 */
	@Column(name="DESCRIPTION",columnDefinition="Varchar",length=1024)
	@XmlElement(name="description")
	private String description;

	public void setPolicyId(Integer obj){
		this.policyId = obj;
	}

	public Integer getPolicyId(){
		return policyId;
	}

	public void setName(String obj){
		this.name = obj;
	}

	public String getName(){
		return name;
	}

	public void setUseTrigger(Integer obj){
		this.useTrigger = obj;
	}

	public Integer getUseTrigger(){
		return useTrigger;
	}

	public void setPolicyExpr(String obj){
		this.policyExpr = obj;
	}

	public String getPolicyExpr(){
		return policyExpr;
	}

	public void setDescription(String obj){
		this.description = obj;
	}

	public String getDescription(){
		return description;
	}

	public SysPolicy(){
	}

	public SysPolicy(Integer policyId){
		this.policyId = policyId;
	}

	public boolean equals(final Object rhs0){
		if (rhs0 == null)return false;
		SysPolicy rhs=(SysPolicy)rhs0;
		if(!ObjectUtils.equals(policyId, rhs.policyId)) return false;
		return super.isEquals(rhs);
	}

	public int hashCode(){
		return new HashCodeBuilder()
		.append(policyId)
		.append(super.getHashCode())
		.toHashCode();
	}


public enum Field implements jef.database.Field{policyId,name,useTrigger,policyExpr,description}
}