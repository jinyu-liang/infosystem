package com.ailk.openbilling.persistence.cust.entity;

import javax.persistence.Table;
import jef.database.DataObject;
import javax.persistence.Id;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAccessType;
import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.Date;
import jef.codegen.support.NotModified;
/**
 * This class was generated by EasyFrame according to the table in database.
 * You need to modify the type of primary key field, to the strategy your own.
 * 
 */
@NotModified
@Entity
@Table(schema="CD",name="CM_INDIVIDUAL_NAME")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(propOrder={"partyId","languageId","formattedName","legalName","lristocraticTitleId","formOfAddress","generation","givenNames","preferredGivenName","middleNames","familyNamePrefix","familyNames","familyGeneration","validDate","expireDate","soNbr","createDate","soDate"})
public class CmIndividualName extends DataObject{


	/**
	 * The Unique Identiter of Party
	 */
	@Id
	@Column(name="PARTY_ID",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="partyId")
	private Long partyId;

	/**
	 * Language code,this is the language type of the name
	 */
	@Column(name="LANGUAGE_ID",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="languageId")
	private Integer languageId;

	/**
	 * Format Name
	 */
	@Column(name="FORMATTED_NAME",columnDefinition="Varchar",length=64)
	@XmlElement(name="formattedName")
	private String formattedName;

	/**
	 * Legal Name
	 */
	@Column(name="LEGAL_NAME",columnDefinition="Varchar",length=64)
	@XmlElement(name="legalName")
	private String legalName;

	/**
	 * Noble's Title

0:No Title
1: Duke
2: Marquis
3: Count
4: Viscount
5: Baron
	 */
	@Column(name="LRISTOCRATIC_TITLE_ID",precision=8,columnDefinition="NUMBER")
	@XmlElement(name="lristocraticTitleId")
	private Integer lristocraticTitleId;

	/**
	 * Appellation


1：Mrs
2：Mr
	 */
	@Column(name="FORM_OF_ADDRESS",columnDefinition="Varchar",length=64)
	@XmlElement(name="formOfAddress")
	private String formOfAddress;

	/**
	 * The severalth generation (family)
	 */
	@Column(name="GENERATION",columnDefinition="Varchar",length=16)
	@XmlElement(name="generation")
	private String generation;

	/**
	 * Religion  Name
	 */
	@Column(name="GIVEN_NAMES",columnDefinition="Varchar",length=16)
	@XmlElement(name="givenNames")
	private String givenNames;

	/**
	 * First-selected Religion Name
	 */
	@Column(name="PREFERRED_GIVEN_NAME",columnDefinition="Varchar",length=16)
	@XmlElement(name="preferredGivenName")
	private String preferredGivenName;

	/**
	 * Middle Name
	 */
	@Column(name="MIDDLE_NAMES",columnDefinition="Varchar",length=64)
	@XmlElement(name="middleNames")
	private String middleNames;

	/**
	 * Family's Name Prefix
	 */
	@Column(name="FAMILY_NAME_PREFIX",columnDefinition="Varchar",length=64)
	@XmlElement(name="familyNamePrefix")
	private String familyNamePrefix;

	/**
	 * Family Name
	 */
	@Column(name="FAMILY_NAMES",columnDefinition="Varchar",length=64)
	@XmlElement(name="familyNames")
	private String familyNames;

	/**
	 * The severalth generation in family
	 */
	@Column(name="FAMILY_GENERATION",columnDefinition="Varchar",length=64)
	@XmlElement(name="familyGeneration")
	private String familyGeneration;

	/**
	 * Valid Date
	 */
	@Id
	@Column(name="VALID_DATE",columnDefinition="TimeStamp",nullable=false)
	@XmlElement(name="validDate")
	private Date validDate;

	/**
	 * Expired Date
	 */
	@Column(name="EXPIRE_DATE",columnDefinition="TimeStamp",nullable=false)
	@XmlElement(name="expireDate")
	private Date expireDate;

	/**
	 * The serial number
	 */
	@Id
	@Column(name="SO_NBR",precision=8,columnDefinition="NUMBER",nullable=false)
	@XmlElement(name="soNbr")
	private Long soNbr;

	@Column(name="CREATE_DATE",columnDefinition="TimeStamp")
	@XmlElement(name="createDate")
	private Date createDate;

	@Column(name="SO_DATE",columnDefinition="TimeStamp")
	@XmlElement(name="soDate")
	private Date soDate;

	public void setPartyId(Long obj){
		this.partyId = obj;
	}

	public Long getPartyId(){
		return partyId;
	}

	public void setLanguageId(Integer obj){
		this.languageId = obj;
	}

	public Integer getLanguageId(){
		return languageId;
	}

	public void setFormattedName(String obj){
		this.formattedName = obj;
	}

	public String getFormattedName(){
		return formattedName;
	}

	public void setLegalName(String obj){
		this.legalName = obj;
	}

	public String getLegalName(){
		return legalName;
	}

	public void setLristocraticTitleId(Integer obj){
		this.lristocraticTitleId = obj;
	}

	public Integer getLristocraticTitleId(){
		return lristocraticTitleId;
	}

	public void setFormOfAddress(String obj){
		this.formOfAddress = obj;
	}

	public String getFormOfAddress(){
		return formOfAddress;
	}

	public void setGeneration(String obj){
		this.generation = obj;
	}

	public String getGeneration(){
		return generation;
	}

	public void setGivenNames(String obj){
		this.givenNames = obj;
	}

	public String getGivenNames(){
		return givenNames;
	}

	public void setPreferredGivenName(String obj){
		this.preferredGivenName = obj;
	}

	public String getPreferredGivenName(){
		return preferredGivenName;
	}

	public void setMiddleNames(String obj){
		this.middleNames = obj;
	}

	public String getMiddleNames(){
		return middleNames;
	}

	public void setFamilyNamePrefix(String obj){
		this.familyNamePrefix = obj;
	}

	public String getFamilyNamePrefix(){
		return familyNamePrefix;
	}

	public void setFamilyNames(String obj){
		this.familyNames = obj;
	}

	public String getFamilyNames(){
		return familyNames;
	}

	public void setFamilyGeneration(String obj){
		this.familyGeneration = obj;
	}

	public String getFamilyGeneration(){
		return familyGeneration;
	}

	public void setValidDate(Date obj){
		this.validDate = obj;
	}

	public Date getValidDate(){
		return validDate;
	}

	public void setExpireDate(Date obj){
		this.expireDate = obj;
	}

	public Date getExpireDate(){
		return expireDate;
	}

	public void setSoNbr(Long obj){
		this.soNbr = obj;
	}

	public Long getSoNbr(){
		return soNbr;
	}

	public void setCreateDate(Date obj){
		this.createDate = obj;
	}

	public Date getCreateDate(){
		return createDate;
	}

	public void setSoDate(Date obj){
		this.soDate = obj;
	}

	public Date getSoDate(){
		return soDate;
	}

	public CmIndividualName(){
	}

	public CmIndividualName(Long partyId,Date validDate,Long soNbr){
		this.partyId = partyId;
		this.validDate = validDate;
		this.soNbr = soNbr;
	}

	public boolean equals(final Object rhs0){
		if (rhs0 == null)return false;
		CmIndividualName rhs=(CmIndividualName)rhs0;
		if(!ObjectUtils.equals(partyId, rhs.partyId)) return false;
		if(!ObjectUtils.equals(validDate, rhs.validDate)) return false;
		if(!ObjectUtils.equals(soNbr, rhs.soNbr)) return false;
		return super.isEquals(rhs);
	}

	public int hashCode(){
		return new HashCodeBuilder()
		.append(partyId)
		.append(validDate)
		.append(soNbr)
		.append(super.getHashCode())
		.toHashCode();
	}


public enum Field implements jef.database.Field{partyId,languageId,formattedName,legalName,lristocraticTitleId,formOfAddress,generation,givenNames,preferredGivenName,middleNames,familyNamePrefix,familyNames,familyGeneration,validDate,expireDate,soNbr,createDate,soDate}
}